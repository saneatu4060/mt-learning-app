generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // games         Game[]
  accounts      Account[]
  sessions      Session[]
}

model Question {
  id           Int      @id @default(autoincrement()) // 問題ID (プライマリキー)
  category     String // 問題カテゴリ
  questionText String // 問題文
  choices      Choice[] // 選択肢 (別のモデルで定義されるChoiceとの1対多リレーション)
  answer       Answer[] // 外部キーによるBテーブル (Answer) とのリレーション

  // 自動生成されるフィールド
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Choice {
  id         Int      @id @default(autoincrement()) // 選択肢のID
  text       String // 選択肢のテキスト
  questionId Int // Questionテーブルとのリレーション
  question   Question @relation(fields: [questionId], references: [id])

  // 自動生成されるフィールド
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id        Int      @id @default(autoincrement()) // 答えのID
  problemId Int // 問題ID (Questionテーブルとのリレーション)
  question  Question @relation(fields: [problemId], references: [id]) // Aテーブル(Question)への外部キー
  imageUrl  String? // 図のURL (任意)
  answers   String[] // 答え (複数正解を配列で保持)

  // 自動生成されるフィールド
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
